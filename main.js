const { app, BrowserWindow, Menu, dialog, ipcMain, session } = require('electron');
const fs = require('fs');
const path = require('path');

app.setName('TextMage');
app.setAppUserModelId('TextMage');

let lastOpenedUrl = null;
let t9Enabled = true;
let mainWindow = null;

const userDataPath = app.getPath('userData');
const configPath = path.join(userDataPath, 'config.json');
const boundsPath = path.join(userDataPath, 'window-bounds.json');

const defaultUA = 'Mozilla/5.0 (X11; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0';
const copilotUA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0';
const deepseekUA = 'Mozilla/5.0 (X11; Linux x86_64; rv:130.0) Gecko/20100101 LibreWolf/130.0';

// ===== Version Sync Function =====
function updateAboutVersion() {
  try {
    const { version } = require('./package.json');
    let aboutContent = fs.readFileSync('about.html', 'utf8');
    aboutContent = aboutContent.replace(
      /<p>–í–µ—Ä—Å–∏—è: <span id="version-display">[^<]*<\/span><\/p>/,
      `<p>–í–µ—Ä—Å–∏—è: <span id="version-display">${version}</span></p>`
    );
    fs.writeFileSync('about.html', aboutContent);
    console.log('About page updated to version:', version);
  } catch (error) {
    console.log('Note: about.html not found or couldn\'t be updated');
  }
}

// ===== IPC Handlers =====
ipcMain.handle('read-file', async (_, filePath) => {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (e) {
    console.error('read-file error:', e);
    return null;
  }
});

ipcMain.handle('file-exists', async (_, filePath) => {
  try {
    return fs.existsSync(filePath);
  } catch {
    return false;
  }
});

ipcMain.handle('toggle-t9', async () => {
  const newStatus = !t9Enabled;
  t9Enabled = newStatus;
  fs.writeFileSync(configPath, JSON.stringify({ lastUrl: lastOpenedUrl, t9Enabled }));
  
  if (mainWindow) {
    dialog.showMessageBox(mainWindow, {
      type: 'info',
      title: 'TextMage',
      message: `T9 ${newStatus ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`,
      detail: newStatus ? '–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ T9 –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã' : '–†–µ–∂–∏–º —á–∏—Å—Ç–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞'
    });
    
    createMenu(mainWindow);
    
    if (newStatus) {
      // –í–∫–ª—é—á–µ–Ω–∏–µ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      mainWindow.reload();
    } else {
      // –í—ã–∫–ª—é—á–µ–Ω–∏–µ - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      await mainWindow.webContents.executeJavaScript(`
        try {
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ T9 —ç–ª–µ–º–µ–Ω—Ç—ã
          const elementsToRemove = [
            't9-suggestions-bar',
            't9-add-word-btn', 
            't9-dictionary-btn',
            't9-notification',
            't9-add-word-dialog',
            't9-dictionary-manager'
          ];
          
          elementsToRemove.forEach(id => {
            const el = document.getElementById(id);
            if (el) el.remove();
          });
          
          // –û—Ç–∫–ª—é—á–∞–µ–º T9 –ª–æ–≥–∏–∫—É
          if (window.t9Predictor) {
            window.t9Predictor.isEnabled = false;
            window.t9Predictor.hideSuggestions();
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–∞–π–º–∞—É—Ç—ã
            if (window.t9Predictor.inputDebounce) {
              clearTimeout(window.t9Predictor.inputDebounce);
            }
            
            // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
            window.t9Predictor = null;
          }
          
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ T9
          const allStyles = document.querySelectorAll('style');
          allStyles.forEach(style => {
            if (style.textContent && (
              style.textContent.includes('t9-') ||
              style.textContent.includes('T9Predictor') ||
              style.textContent.includes('#t9-suggestions-bar')
            )) {
              style.remove();
            }
          });
          
          console.log('üî¥ T9 –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ T9:', error);
        }
      `).catch(() => {});
    }
  }
  
  return t9Enabled;
});

ipcMain.handle('get-t9-status', async () => t9Enabled);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ "–û –º–∞–≥–∏–∏"
ipcMain.on('open-magic-window', () => {
    const magicWindow = new BrowserWindow({
        width: 400,
        height: 720,
        title: '–û –º–∞–≥–∏–∏ TextMage',
        icon: path.join(__dirname, 'assets', 'icon.png'),
        resizable: false,
        parent: null,
        modal: false,
        autoHideMenuBar: true,
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false,
            webSecurity: false
        }
    });

    const magicHTML = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–û –º–∞–≥–∏–∏ TextMage</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: #333;
                height: 100vh;
                overflow: hidden;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .modal-content {
                background: white;
                border-radius: 12px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                width: 380px;
                max-width: 90vw;
                overflow: hidden;
                border: 1px solid #e1e5e9;
            }
            .modal-header {
                background: linear-gradient(135deg, #8B5CF6, #6D28D9);
                color: white;
                padding: 20px;
                display: flex;
                align-items: center;
                justify-content: space-between;
            }
            .modal-header h3 {
                margin: 0;
                font-size: 18px;
                font-weight: 600;
                flex: 1;
                text-align: center;
            }
            .modal-logo { font-size: 24px; margin-right: 10px; }
            .modal-close {
                background: none;
                border: none;
                color: white;
                font-size: 24px;
                cursor: pointer;
                padding: 0;
                width: 30px;
                height: 30px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: background 0.2s ease;
            }
            .modal-close:hover { background: rgba(255, 255, 255, 0.2); }
            .modal-body { padding: 25px; }
            .modal-body p {
                margin-bottom: 20px;
                color: #333;
                line-height: 1.5;
                text-align: center;
            }
            .magic-features { display: flex; flex-direction: column; gap: 15px; }
            .magic-item {
                display: flex;
                align-items: center;
                gap: 12px;
                padding: 12px;
                background: #f8f9fa;
                border-radius: 8px;
                border-left: 3px solid #8B5CF6;
            }
            .magic-icon { font-size: 18px; flex-shrink: 0; }
            .magic-item span:last-child { color: #555; line-height: 1.4; }
            .modal-footer {
                padding: 20px;
                border-top: 1px solid #f1f5f9;
                display: flex;
                justify-content: center;
            }
            .modal-btn {
                background: #8B5CF6;
                color: white;
                border: none;
                padding: 12px 30px;
                border-radius: 6px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.2s ease;
            }
            .modal-btn:hover { background: #7C3AED; transform: translateY(-1px); }
        </style>
    </head>
    <body>
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-logo">‚ú®</div>
                <h3>–û –º–∞–≥–∏–∏ TextMage</h3>
                <button class="modal-close" onclick="window.close()">√ó</button>
            </div>
            <div class="modal-body">
                <p>TextMage - —ç—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞—Ö!</p>
                <div class="magic-features">
                    <div class="magic-item">
                        <span class="magic-icon">üîÆ</span>
                        <span>–£–º–Ω—ã–π –∑–∞–ø—É—Å–∫: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∫–ª–∞–¥–∫—É –∏–ª–∏ Copilot –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</span>
                    </div>
                    <div class="magic-item">
                        <span class="magic-icon">‚ú®</span>
                        <span>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ T9 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤–≤–æ–¥–∞ –≤ –ª—é–±–æ–º AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ</span>
                    </div>
                    <div class="magic-item">
                        <span class="magic-icon">üìö</span>
                        <span>–î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å</span>
                    </div>
                    <div class="magic-item">
                        <span class="magic-icon">üöÄ</span>
                        <span>–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ 5 AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º: Perplexity, Copilot, Gemini, DeepSeek, ChatGPT</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-btn" onclick="window.close()">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        </div>
        <script>
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') window.close();
            });
        </script>
    </body>
    </html>
    `;

    magicWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(magicHTML)}`);
});

// ===== App Startup =====
app.whenReady().then(() => {
  try {
    if (fs.existsSync(configPath)) {
      const cfg = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      lastOpenedUrl = cfg.lastUrl || null;
      t9Enabled = cfg.t9Enabled ?? true;
    }
  } catch (e) {
    console.warn('Config read error:', e);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ about.html –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–∫–Ω–∞
  updateAboutVersion();
  
  createWindow();
});

// ===== Window Management =====
function createWindow() {
  const { version } = require('./package.json');
  
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    title: `TextMage`,
    icon: path.join(__dirname, 'assets', 'icon.png'),
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      webSecurity: false
    }
  });

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–∫–Ω–∞
  if (fs.existsSync(boundsPath)) {
    try {
      const bounds = JSON.parse(fs.readFileSync(boundsPath, 'utf8'));
      mainWindow.setBounds(bounds);
    } catch (e) {
      console.warn('Bounds restore error:', e);
    }
  }

  mainWindow.on('close', () => {
    try {
      fs.writeFileSync(boundsPath, JSON.stringify(mainWindow.getBounds()));
      fs.writeFileSync(configPath, JSON.stringify({ lastUrl: lastOpenedUrl, t9Enabled }));
    } catch (e) {
      console.warn('Save bounds error:', e);
    }
  });

  // User-Agent –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  session.defaultSession.webRequest.onBeforeSendHeaders((details, callback) => {
    const headers = details.requestHeaders;
    const url = details.url;
    if (url.includes('copilot.microsoft.com') || url.includes('bing.com')) {
      headers['User-Agent'] = copilotUA;
    } else if (url.includes('deepseek.com')) {
      headers['User-Agent'] = deepseekUA;
    } else {
      headers['User-Agent'] = defaultUA;
    }
    callback({ requestHeaders: headers });
  });

  const startUrl = lastOpenedUrl || 'https://copilot.microsoft.com/';
  mainWindow.loadURL(startUrl);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL
  const saveUrl = (_, url) => {
    if (url && !url.startsWith('chrome://') && !url.startsWith('devtools://')) {
      lastOpenedUrl = url;
    }
  };
  mainWindow.webContents.on('did-navigate', saveUrl);
  mainWindow.webContents.on('did-navigate-in-page', saveUrl);

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
  mainWindow.webContents.on('context-menu', (event, params) => {
    const { selectionText, isEditable } = params;
    const template = [];
    
    if (selectionText && selectionText.trim()) {
      template.push({ label: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', role: 'copy', accelerator: 'Ctrl+C' });
    }
    
    if (isEditable) {
      if (template.length > 0) template.push({ type: 'separator' });
      template.push(
        { label: '–í—Å—Ç–∞–≤–∏—Ç—å', role: 'paste', accelerator: 'Ctrl+V' },
        { label: '–í—ã—Ä–µ–∑–∞—Ç—å', role: 'cut', accelerator: 'Ctrl+X', enabled: !!selectionText },
        { type: 'separator' },
        { label: '–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ', role: 'selectall', accelerator: 'Ctrl+A' }
      );
    }
    
    if (template.length > 0) {
      Menu.buildFromTemplate(template).popup();
    }
  });

  // –ò–Ω–∂–µ–∫—Ç T9 –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
  mainWindow.webContents.on('did-finish-load', () => {
    const currentUrl = mainWindow.webContents.getURL();
    const shouldInject = !currentUrl.startsWith('devtools://') && 
                        !currentUrl.startsWith('chrome://') && 
                        t9Enabled;
    
    if (shouldInject) {
      setTimeout(() => injectT9(mainWindow), 800);
    }
  });

  createMenu(mainWindow);
}

// ===== T9 Injection =====
async function injectT9(win) {
  if (!t9Enabled) {
    console.log('üü° T9 –æ—Ç–∫–ª—é—á–µ–Ω, –∏–Ω–∂–µ–∫—Ç –ø—Ä–æ–ø—É—â–µ–Ω');
    return;
  }
  
  try {
    console.log('üü¢ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∂–µ–∫—Ç T9...');
    
    // –ò–Ω–∂–µ–∫—Ç CSS
    const cssPath = path.join(__dirname, 't9.css');
    if (fs.existsSync(cssPath)) {
      const cssContent = fs.readFileSync(cssPath, 'utf8');
      win.webContents.insertCSS(cssContent);
    }

    // –ò–Ω–∂–µ–∫—Ç JavaScript —Ñ–∞–π–ª–æ–≤
    const scripts = ['words.js', 't9.js'];
    for (const file of scripts) {
      const scriptPath = path.join(__dirname, file);
      if (fs.existsSync(scriptPath)) {
        const code = fs.readFileSync(scriptPath, 'utf8');
        await win.webContents.executeJavaScript(code).catch(e => {
          console.warn(`–û—à–∏–±–∫–∞ –∏–Ω–∂–µ–∫—Ç–∞ ${file}:`, e.message);
        });
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è T9
    await win.webContents.executeJavaScript(`
      if (typeof T9Predictor !== 'undefined') {
        if (window.t9Predictor) {
          try {
            window.t9Predictor.hideSuggestions();
            if (window.t9Predictor.inputDebounce) {
              clearTimeout(window.t9Predictor.inputDebounce);
            }
          } catch (e) {}
          window.t9Predictor = null;
        }
        
        window.t9Predictor = new T9Predictor();
        window.t9Predictor.isEnabled = true;
        
        console.log('‚úÖ T9 —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.error('‚ùå T9Predictor –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∏–Ω–∂–µ–∫—Ç–∞');
      }
    `);
    
    console.log('‚úÖ T9 –∏–Ω–∂–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∂–µ–∫—Ç–∞ T9:', e);
  }
}

// ===== Menu System =====
function createMenu(win) {
  const { version } = require('./package.json');
  
  const template = [
    {
      label: '–ú–µ–Ω—é',
      submenu: [
        { label: 'üîç Perplexity', click: () => win.loadURL('https://www.perplexity.ai/') },
        { label: 'üöÄ Copilot', click: () => win.loadURL('https://copilot.microsoft.com/') },
        { label: '‚ú® Gemini', click: () => win.loadURL('https://gemini.google.com/app') },
        { label: 'üß† DeepSeek', click: () => win.loadURL('https://chat.deepseek.com') },
        { label: 'ü§ñ ChatGPT', click: () => win.loadURL('https://chatgpt.com/') },
        { type: 'separator' },
        { label: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É', accelerator: 'CmdOrCtrl+R', role: 'reload' },
        { label: '–ù–æ–≤–æ–µ –æ–∫–Ω–æ', accelerator: 'CmdOrCtrl+N', click: () => createWindow() },
        { type: 'separator' },
        { label: '–í—ã—Ö–æ–¥', role: 'quit' }
      ]
    },
    {
      label: '–ü—Ä–∞–≤–∫–∞',
      submenu: [
        { label: '–û—Ç–º–µ–Ω–∏—Ç—å', accelerator: 'CmdOrCtrl+Z', role: 'undo' },
        { label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', accelerator: 'Shift+CmdOrCtrl+Z', role: 'redo' },
        { type: 'separator' },
        { label: '–í—ã—Ä–µ–∑–∞—Ç—å', accelerator: 'CmdOrCtrl+X', role: 'cut' },
        { label: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', accelerator: 'CmdOrCtrl+C', role: 'copy' },
        { label: '–í—Å—Ç–∞–≤–∏—Ç—å', accelerator: 'CmdOrCtrl+V', role: 'paste' },
        { label: '–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ', accelerator: 'CmdOrCtrl+A', role: 'selectall' }
      ]
    },
    {
      label: '–û–∫–Ω–æ',
      role: 'window',
      submenu: [
        { label: '–°–≤–µ—Ä–Ω—É—Ç—å', accelerator: 'CmdOrCtrl+M', role: 'minimize' },
        { label: '–ó–∞–∫—Ä—ã—Ç—å', accelerator: 'CmdOrCtrl+W', role: 'close' },
        { type: 'separator' },
        { label: '–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω', accelerator: 'F11', role: 'togglefullscreen' },
        { label: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', accelerator: 'F12', role: 'toggledevtools' }
      ]
    },
    {
      label: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
      submenu: [
        {
          label: t9Enabled ? '‚úÖ T9 –í–∫–ª—é—á–µ–Ω' : '‚ùå T9 –í—ã–∫–ª—é—á–µ–Ω',
          click: async () => {
            try {
              const newStatus = await ipcMain.invoke('toggle-t9');
              console.log('T9 –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞:', newStatus);
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è T9:', error);
              t9Enabled = !t9Enabled;
              fs.writeFileSync(configPath, JSON.stringify({ lastUrl: lastOpenedUrl, t9Enabled }));
              createMenu(win);
              
              dialog.showMessageBox(win, {
                type: 'info',
                title: 'TextMage',
                message: `T9 ${t9Enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`,
                detail: t9Enabled ? '–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ T9 –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã' : '–†–µ–∂–∏–º —á–∏—Å—Ç–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞'
              });
              
              if (t9Enabled) win.reload();
            }
          }
        },
        { type: 'separator' },
        {
          label: 'üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º',
          click: () => {
            if (t9Enabled) {
              win.webContents.executeJavaScript(`
                if (window.t9Predictor && window.t9Predictor.showDictionaryManager) {
                  window.t9Predictor.showDictionaryManager();
                } else {
                  alert('T9 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                }
              `);
            } else {
              dialog.showMessageBox(win, {
                type: 'info',
                title: 'T9 –≤—ã–∫–ª—é—á–µ–Ω',
                message: '–í–∫–ª—é—á–∏—Ç–µ T9 –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ–≤–∞—Ä—é'
              });
            }
          }
        },
        {
          label: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ',
          click: () => {
            if (t9Enabled) {
              win.webContents.executeJavaScript(`
                if (window.t9Predictor && window.t9Predictor.showAddWordDialog) {
                  window.t9Predictor.showAddWordDialog();
                }
              `);
            } else {
              dialog.showMessageBox(win, {
                type: 'info',
                title: 'T9 –≤—ã–∫–ª—é—á–µ–Ω',
                message: '–í–∫–ª—é—á–∏—Ç–µ T9 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤'
              });
            }
          }
        },
        { type: 'separator' },
        {
          label: 'üì• –ò–º–ø–æ—Ä—Ç —Å–ª–æ–≤',
          click: () => {
            if (t9Enabled) {
              win.webContents.executeJavaScript(`
                if (window.t9Predictor && window.t9Predictor.importWordsFromFile) {
                  window.t9Predictor.importWordsFromFile();
                }
              `);
            } else {
              dialog.showMessageBox(win, {
                type: 'info',
                title: 'T9 –≤—ã–∫–ª—é—á–µ–Ω',
                message: '–í–∫–ª—é—á–∏—Ç–µ T9 –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–ª–æ–≤'
              });
            }
          }
        },
        {
          label: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç —Å–ª–æ–≤',
          click: () => {
            if (t9Enabled) {
              win.webContents.executeJavaScript(`
                if (window.t9Predictor && window.t9Predictor.exportDictionary) {
                  window.t9Predictor.exportDictionary();
                }
              `);
            } else {
              dialog.showMessageBox(win, {
                type: 'info',
                title: 'T9 –≤—ã–∫–ª—é—á–µ–Ω',
                message: '–í–∫–ª—é—á–∏—Ç–µ T9 –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ª–æ–≤'
              });
            }
          }
        }
      ]
    },
    {
      label: '–ü–æ–º–æ—â—å',
      submenu: [
        {
          label: `–û –ø—Ä–æ–≥—Ä–∞–º–º–µ`,
          click: () => {
            const aboutPath = path.join(__dirname, 'about.html');
            if (fs.existsSync(aboutPath)) {
              const about = new BrowserWindow({
                width: 400,
                height: 650,
                title: `–û –ø—Ä–æ–≥—Ä–∞–º–º–µ TextMage v${version}`,
                icon: path.join(__dirname, 'assets', 'icon.png'),
                resizable: false,
                parent: null,
                modal: false,
                autoHideMenuBar: true,
                webPreferences: {
                  nodeIntegration: true,
                  contextIsolation: false,
                  webSecurity: false
                }
              });
              about.loadFile(aboutPath);
            } else {
              dialog.showMessageBox(mainWindow, {
                type: 'info',
                title: `–û TextMage v${version}`,
                message: `TextMage ${version}`,
                detail: '–ê–≤—Ç–æ—Ä: Legalize86\nAI –ø–æ–º–æ—â–Ω–∏–∫ —Å T9 –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º'
              });
            }
          }
        }
      ]
    }
  ];

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

// ===== App Event Handlers =====
app.on('before-quit', () => {
  try {
    fs.writeFileSync(configPath, JSON.stringify({ lastUrl: lastOpenedUrl, t9Enabled }));
  } catch (e) {
    console.warn('Save config on quit error:', e);
  }
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) createWindow();
});

// ===== Performance Optimizations =====
app.commandLine.appendSwitch('--disable-features', 'VizDisplayCompositor');
app.commandLine.appendSwitch('--disable-logging');

console.log('üöÄ TextMage –∑–∞–ø—É—â–µ–Ω');
